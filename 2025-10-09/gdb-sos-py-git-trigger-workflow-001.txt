Yes, you can retrigger it purely with git by updating (or recreating) the tag so a new tag push event fires. Here are two practical approaches.

Option 1: Re-point the existing tag (forces a new push event)

This re-pushes v0.1.0 and will trigger on: push → tags: v*
Steps:

Ensure you’re on the commit you want to build (e.g., latest main), then:
Update the local tag to this commit:
git tag -f v0.1.0
Force-push the tag to origin:
git push -f origin v0.1.0
Notes:

If the existing GitHub Release for v0.1.0 already has assets with the same names, the upload step may fail (“asset already exists”). You’d need to delete those assets first (UI or API).
If your repo has protected tags, force-pushing may be blocked.
Option 2: Delete and recreate the tag (cleanest for tag-create triggers)

Delete the remote and local tag:
git push origin :refs/tags/v0.1.0
git tag -d v0.1.0
Recreate and push the tag on the desired commit:
git tag -a v0.1.0 -m "v0.1.0"
git push origin v0.1.0
Notes:

Same asset-name collision caveat as above if the Release already has assets.
The existing Release object for v0.1.0 remains; re-push will attach new artifacts to it (assuming uploads don’t conflict).
If you want to avoid asset collisions without deleting anything, use a new tag (e.g., v0.1.0-build2) so the workflow runs and publishes under that tag.
