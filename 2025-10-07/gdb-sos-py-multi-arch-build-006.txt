I’m going to check the diagnostics build scripts to confirm which environment variable they honor for installing the SDK (DOTNET_INSTALL_DIR vs DOTNET_ROOT), to see why it still installs to .dotnet without the arch suffix.

Searched text for DOTNET_INSTALL_DIR|_InitializeDotNetCli|InitializeDotNetCli|DOTNET_ROOT (**/src/diagnostics/**), 20 results
Searched text for DOTNET_INSTALL_DIR|InitializeDotNetCli|_InitializeDotNetCli (**/src/diagnostics/eng/common/**), 20 results
Summarized conversation history

Read build.sh

I'll inspect diagnostics' build scripts to see how DOTNET_INSTALL_DIR is handled and why it might still default to .dotnet without the arch suffix.

Read tools.sh, lines 1 to 260

Read build.sh

Searched text for repo_root= (**/src/diagnostics/eng/common/tools.sh), 2 results
I'm going to update the top-level build.sh to pre-install the required .NET SDK into src/diagnostics/.dotnet.{arch} using dotnet-install.sh based on diagnostics/global.json, then export DOTNET_* env and log them so Arcade's InitializeDotNetCli will honor our directory.

build.sh+41-0
build.sh+3-0
Checked build.sh, no problems found

Read build.sh, lines 1 to 140

I’ll lock in the per-arch .NET SDK placement for diagnostics and add clear logging so we can verify it’s honored end-to-end.

actions taken
Hardened diagnostics SDK selection in build.sh

Pre-installs the exact SDK required by global.json into src/diagnostics/.dotnet.{arch} before invoking diagnostics’ build.
Exports and logs:
DOTNET_MULTILEVEL_LOOKUP=0
DOTNET_INSTALL_DIR=src/diagnostics/.dotnet.{arch}
DOTNET_ROOT same as above
PATH includes DOTNET dir (yes/no)
Reason: Arcade’s InitializeDotNetCli only honors DOTNET_INSTALL_DIR if that folder already contains the requested SDK. Otherwise it falls back to repo_root/.dotnet. By pre-installing, we force Arcade to stay in .dotnet.{arch}.
Bridge step consistency

Re-exports the same DOTNET_* env for the CMake bridge configure/build and logs them, ensuring any managed tooling also uses the diagnostics’ per-arch toolset.
What changed at a glance:

build.sh:
Pre-install via dotnet-install.sh --jsonfile [global.json](http://_vscodecontentref_/6) --install-dir src/diagnostics/.dotnet.{arch} [--architecture x64|arm64] --skip-non-versioned-files.
Added concise environment echo before diagnostics and bridge steps.
why this fixes the issue
Diagnostics’ Arcade script (tools.sh) uses DOTNET_INSTALL_DIR only if it already contains the SDK version from global.json. If not, it resets to repo_root/.dotnet. Your report (install landing in .dotnet) suggests the requested SDK wasn’t present under the suffixed path when Arcade ran. Pre-installing eliminates that fallback.

how to verify
Run your normal build (or just the diagnostics part), then check:
Console output: look for the “Diagnostics toolset” lines that print DOTNET_INSTALL_DIR and DOTNET_ROOT with the expected .dotnet.{arch} suffix and the PATH check.
Filesystem:
Confirm src/diagnostics/.dotnet.{arch}/sdk/<version>/ exists (version from global.json).
Confirm there’s no fresh SDK under .dotnet without the suffix (it may exist from prior runs; if you want a clean test, remove/rename that folder first).
Expected behavior:

Diagnostics installs/uses the SDK only under src/diagnostics/.dotnet.{arch}.
The bridge step prints the same DOTNET_* values and completes with that toolset.
notes and edge cases
Arch mapping: currently handling x64 and arm64; for other arches we omit --architecture (the installer will choose). If you need additional arches, we can extend the mapping trivially.
If curl fails (offline/blocked), Arcade will still attempt to install; but then it may fall back to .dotnet. In that case, re-run when connectivity is available.
quick progress update
Searched and confirmed Arcade logic: falls back to repo_root/.dotnet unless DOTNET_INSTALL_DIR already contains the requested SDK.
Updated build.sh to pre-install SDK into .dotnet.{arch} and added logging for both diagnostics and bridge steps.
Next: run a build to validate that diagnostics now honors the suffixed folder; if anything still lands in .dotnet without suffix, we’ll inspect the printed env and adjust accordingly.
requirements coverage
Ensure diagnostics honor per-arch SDK folder: Done (pre-install + logging).
Provide observability to debug future deviations: Done (env echo in both phases).
If you want, I can kick off a targeted build now and report the exact folder usage from the logs.


