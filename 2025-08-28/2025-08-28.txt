issue 1:

 Error: 0 : [LOAD] LoadLibrary(/root/dotnethello/libmscordaccore.so) FAILED: Dll
NotFoundException - /root/dotnethello/libmscordaccore.so: undefined symbol: _Uaa
rch64_get_reg

troubleshooting:
AI says _Uaarch64_get_reg is in dependency so libunwind.

oldzhu@oldzhu-box-999:~/buildroot$ output/build/host-lldb-origin_main/llvm/buildroot-build/bin/llvm-nm -D output/target/usr/lib/libunwind.so  |grep _Uaarch64
0000000000003710 T _Uaarch64_flush_cache
0000000000004420 T _Uaarch64_get_accessors
0000000000002e00 T _Uaarch64_get_elf_image
0000000000003630 T _Uaarch64_get_exe_image_path
0000000000003bc0 T _Uaarch64_is_fpreg
0000000000003bd0 T _Uaarch64_regname
0000000000003b00 T _Uaarch64_strerror
oldzhu@oldzhu-box-999:~/buildroot$ output/build/host-lldb-origin_main/llvm/buildroot-build/bin/llvm-nm -D output/target/usr/lib/libunwind.so  |grep _Uaarch64_get_reg

seems there is no _Uaarch64_get_reg in the new libunwinds.so.8 built locally

00000000000046d0 T _ULaarch64_get_reg
0000000000005590 T _ULaarch64_get_save_loc
but there is _ULaarch64_get_reg

also noted https://github.com/libunwind/libunwind/blob/5f46ba494c367968cb79ef5a53810c6108d86d9c/src/mi/Lget_reg.c

#define UNW_LOCAL_ONLY
#include <libunwind.h>
#if defined(UNW_LOCAL_ONLY) && !defined(UNW_REMOTE_ONLY)
#include "Gget_reg.c"
#endif

seems like should be related with the below

https://github.com/libunwind/libunwind/blob/5f46ba494c367968cb79ef5a53810c6108d86d9c/include/libunwind-common.h.in#L54

#ifdef UNW_LOCAL_ONLY
# define UNW_PREFIX	UNW_PASTE(UNW_PASTE(_UL,UNW_TARGET),_)
#else /* !UNW_LOCAL_ONLY */
# define UNW_PREFIX	UNW_PASTE(UNW_PASTE(_U,UNW_TARGET),_)
#endif /* !UNW_LOCAL_ONLY */

could be related with this

also checked the local nm -D /usr/lib/x86_64-linux-gnu/libunwind.so.8|grep x86_64 and found it is the same only contains
UL version of _get_reg...

could it still be caused by why libmscordaccore.so try to find U version of _get_reg. Let me do more comparation.

oldzhu@oldzhu-box-999:~/buildroot$ output/build/host-lldb-origin_main/llvm/buildroot-build/bin/llvm-readelf -s output/target/root/dotnethello/libmscordaccore.so.dbg | grep aarch64
output/build/host-lldb-origin_main/llvm/buildroot-build/bin/llvm-readelf: warning: 'output/target/root/dotnethello/libmscordaccore.so.dbg': no valid dynamic table was found
...
 18649: 00000000001935fc  1068 FUNC    LOCAL  DEFAULT    12 _ULaarch64_step
 18689: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND _Uaarch64_get_reg
 18704: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND _Uaarch64_create_addr_space
 18779: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND _Uaarch64_step
 18797: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND _Uaarch64_destroy_addr_space
 18815: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND _Uaarch64_init_remote
 18917: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND _Uaarch64_get_proc_info_in_range

continue to work on gdbsos python extension:

I’ll stabilize dumpobj end-to-end by fixing the ABI sizes and filling a couple of stub behaviors SOS relies on.

Checklist:

Align ctypes base types to 32-bit for HRESULT/ULONG. Done.
Fix vtable CFUNCTYPE signatures to use ULONG consistently. Done.
Implement OutputVaList formatting to surface SOS messages. Done.
Make Host.GetCurrentTarget return S_OK with null target. Done.
Provide a minimal GetExpression and Execute. Done.
Re-test in GDB and report traces/HRESULT. Pending your run.
actions taken

Types/ABI: Changed HRESULT to c_int32, ULONG to c_uint32, ULONG64 to c_uint64. Audited and corrected ILLDBServices/ILLDBServices2 CFUNCTYPEs to match lldbservices.h (e.g., VirtualUnwind, GetThreadContextBySystemId, GetModuleInfo, GetModuleVersionInformation).
Output: Implemented lldb_output_va_list via libc.vsnprintf and wrote formatted text to the GDB console.
Host: host_get_current_target now returns S_OK with null instead of E_NOTIMPL.
Expression/Execute:
lldb_get_expression now uses gdb.parse_and_eval and returns an integer when possible.
lldb_execute logs the command; no execution yet.
Verified python compile: PASS.
what’s next

Please re-source sos.py in your GDB session and run dumpobj again. Given your latest trace:
We now avoid the stack smash and E_NOTIMPL noise.
The earlier HRESULT -2147467259 (E_FAIL/E_UNEXPECTED) likely came from incomplete output handling or target handling; with OutputVaList and S_OK from GetCurrentTarget, this should improve. If it still fails, share the new trace—next likely gaps are simple module/symbol queries we can stub to S_OK or minimal returns.
Try it

In GDB:
source sos.py
dumpobj 0xADDRESS
If dumpobj still returns failure, paste the latest trace lines after lldb_get_processor_type so I can patch the next missing method quickly.
