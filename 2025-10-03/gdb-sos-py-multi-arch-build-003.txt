To create and run two separate containers with different architectures (one x86-64 and one aarch64) for a single VS Code project on your x86-64 WSL2 host, you need to use a docker-compose.yml file and explicitly specify the platform for the aarch64 container. 
This setup leverages Docker Buildx and QEMU (already configured in modern Docker installations) to emulate the aarch64 environment, even though your host is x86-64. 
Step 1: Set up the docker-compose.yml file
Create a docker-compose.yml file in your .devcontainer folder. This file will define both your x86-64 and aarch64 services. 
yml
version: '3.8'

services:
  app-x86-64:
    build:
      context: .
      dockerfile: Dockerfile
    command: /bin/sh -c "while sleep 1000; do :; done"
    volumes:
      - .:/workspace:cached
    # Specify the default platform (optional, but good practice)
    platform: linux/amd64

  app-aarch64:
    build:
      context: .
      dockerfile: Dockerfile
    command: /bin/sh -c "while sleep 1000; do :; done"
    volumes:
      - .:/workspace:cached
    # Specify the target platform for aarch64
    platform: linux/aarch64
Use code with caution.

platform: linux/amd64: This explicitly specifies the x86-64 architecture for the first container. It's often unnecessary as Docker will default to the host's architecture, but it ensures clarity and consistency.
platform: linux/aarch64: This is the crucial part that forces Docker to pull or build the image for the aarch64 architecture. On your x86-64 host, Docker will automatically use QEMU to emulate this environment. 
Step 2: Configure devcontainer.json to use Docker Compose
Modify your .devcontainer/devcontainer.json file to tell VS Code to use the docker-compose.yml file. 
json
{
  "name": "Multi-Arch .NET Dev",
  "dockerComposeFile": "docker-compose.yml",
  "service": "app-x86-64", // Default service to connect to
  "workspaceFolder": "/workspace",
  "shutdownAction": "stopCompose",
  "postStartCommand": "docker compose ps -a", // Optional: See both containers
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-dotnettools.csdevkit"
      ]
    }
  }
}
Use code with caution.

"service": "app-x86-64": This tells VS Code which container to connect to initially. All containers defined in the docker-compose.yml file will be started, but only the one specified here will have the VS Code editor connected to it. 
Step 3: Run the setup in VS Code
Open your project in VS Code.
Press F1 or Ctrl+Shift+P to open the Command Palette.
Run the command Dev Containers: Reopen in Container. 
VS Code will now:
Build both the x86-64 and aarch64 images as specified in docker-compose.yml.
Start both containers.
Connect your VS Code window to the app-x86-64 container. 
How to use the aarch64 container
After the dev container is running, you will have two containers available. 
Option A: Connect another VS Code window
Open a new VS Code window (File > New Window).
From the Command Palette (F1), run Dev Containers: Attach to Running Container....
Select the app-aarch64 container from the list. 
Option B: Use the terminal in the main window
In your main VS Code window (connected to app-x86-64), open a new terminal.
Use a docker exec command to run a shell in the aarch64 container.
sh
docker exec -it app-aarch64 /bin/bash
Use code with caution.

 
Performance considerations
Be aware that running the aarch64 container on your x86-64 host will be slower due to CPU emulation via QEMU. For tasks like compiling or running computationally intensive tasks, the performance difference will be noticeable compared to the native x86-64 container. 
