The source testing works fine but python import dbgcopilot still not works in gdb but it works in command line, I found the cause now:
from the command line, we could see sys path is as the below:
Version: 3.12.3 (main, Aug 14 2025, 17:47:21) [GCC 13.3.0]
Path:

/usr/lib/python312.zip
/usr/lib/python3.12
/usr/lib/python3.12/lib-dynload
/workspace/.venv/lib/python3.12/site-packages
but in gdb, I got the below:
(gdb) python print('Version:', sys.version)
Version: 3.12.3 (main, Aug 14 2025, 17:47:21) [GCC 13.3.0]
(gdb) python [print(p) for p in sys.path]
/usr/share/gdb/python
/usr/lib/python312.zip
/usr/lib/python3.12
/usr/lib/python3.12/lib-dynload
/usr/local/lib/python3.12/dist-packages
/usr/lib/python3/dist-packages
(gdb)
but our dbgcopilot only install into .venv, that means python in gdb does not aware the python virtual enviroment, if want to make it work, we need to

in gdb, run python sys.path.append('/path/to/your/dbgcopilot/parent/directory') to add .venv dust-packages path to sys-path, but it is not good and I doubt the setting would gone afther gdb exit
install dbgcopilot to local python dist-packages, that is also not good I think.
which is good way to make gdb python import dbgcopilot works?
=========

I'll validate that setting PYTHONPATH to the venv site-packages lets GDB import the package, then share a few persistent, non-invasive options you can choose from (alias, ~/.gdbinit snippet, or env var).


env PYTHONPATH=/workspace/.venv/lib/python3.12/site-packages gdb -q -batch -ex "python import dbgcopilot; print('IMPORTED')" -ex quit
Thanks for clarifying—you only want to avoid adding a new “dbgcopilot-gdb” launcher. We’ll keep the recent plugin fixes (packaged plugin, single copilot command, no future-import issues) and propose clean ways to make python import dbgcopilot work inside GDB without shipping a launcher.

Plan:

Confirm nothing was added for a launcher (done).
Give you safe, persistent options to make GDB see your venv without modifying the package.
Provide quick “try it” commands and minimal ~/.gdbinit snippets.
What’s happening

GDB embeds its own Python and doesn’t inherit your venv’s site-packages by default.
Your command-line Python sees /workspace/.venv/lib/python3.12/site-packages, but GDB’s Python sys.path does not.
We need a stable way to add that directory to GDB’s Python path on startup.
Good options without a new launcher

Set PYTHONPATH when invoking GDB (shell alias or wrapper script you control)
Pros: No repo/package changes; explicit and reversible.
Cons: You must use the alias/wrapper to start GDB.
How to try once:
bash
PYTHONPATH=/workspace/.venv/lib/python3.12/site-packages gdb
Make it persistent with a shell alias:
bash
echo "alias gdb='PYTHONPATH=/workspace/.venv/lib/python3.12/site-packages gdb'" >> ~/.bashrc
source ~/.bashrc
Use ~/.gdbinit to add the venv site-packages
Pros: Works for any GDB invocation; no package changes; very clear.
Cons: Your global GDB config now points at this venv path (only relevant on this dev machine).
Snippet to append to ~/.gdbinit:
gdb
python
import site, sys
site.addsitedir('/workspace/.venv/lib/python3.12/site-packages')
print('[gdbinit] added venv site-packages:', '/workspace/.venv/lib/python3.12/site-packages' in sys.path)
end
After this, inside GDB:
python import dbgcopilot; print('ok')
Add a tiny project-local .gdbinit you source per-project
Pros: Keeps config local to the project repo; avoids touching your global GDB config.
Cons: You must remember to source it at the start of a GDB session.
Create .gdbinit.local at your repo root with:
gdb
python
import site, sys
site.addsitedir('/workspace/.venv/lib/python3.12/site-packages')
end
source $(dbgcopilot-plugin-path)
Use it in a session:
gdb
source /workspace/.gdbinit.local
copilot
Rely solely on “source the packaged plugin” (what you already validated)
Pros: Zero global config; works today.
Cons: You still can’t do python import dbgcopilot until you source it (unless you also add path).
Steps:
gdb
source $(dbgcopilot-plugin-path)
copilot
My recommendation

For development: use ~/.gdbinit (Option 2) on your dev box—it’s the least friction and safest permanent fix.
For project portability: also keep a repo-local .gdbinit.local (Option 3) checked in with a template path, and developers can edit the path to their venv.
Quick try commands

One-off run to prove it:
bash
env PYTHONPATH=/workspace/.venv/lib/python3.12/site-packages gdb -q -ex "python import dbgcopilot; print('IMPORTED')" -ex quit
Source and use plugin:
bash
gdb -q -ex "source $(dbgcopilot-plugin-path)" -ex "copilot"
Status

No “dbgcopilot-gdb” launcher was added, and no packaging entry points were modified to add such a launcher.
Your plugin files remain with the recent fixes (no future imports, command works, REPL improved). If you want to revert any specific parts of those, tell me which behaviors to rollback and I’ll adjust precisely.
Want me to add a sample .gdbinit.local to the repo and document it in README so teammates can adopt it quickly?
