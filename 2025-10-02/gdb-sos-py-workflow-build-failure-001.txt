my workflow build failed as the below:
CMake Error at src/shared/pal/src/configure.cmake:946 (message):
Cannot find liblttng-ust-dev. Try installing liblttng-ust-dev (or the
appropriate packages for your platform)
Call Stack (most recent call first):
src/shared/pal/src/CMakeLists.txt:14 (include)
seems we need to modify our workflow to install liblttng-ust-dev, pls help to modify? I also have question does that mean we need to install build dependencies each time?

===========

I'm going to update the GitHub Actions workflow to install the missing liblttng-ust-dev package so your build succeeds, leaving everything else unchanged.

release.yml+5-1
I’ll patch the workflow to install the missing dependency so your build passes, and clarify the install cadence.

Changes made
Updated release.yml to install native dependency liblttng-ust-dev alongside existing tools:
The “Install build dependencies” step now runs:
apt-get install -y ninja-build clang liblttng-ust-dev
This addresses the CMake error:

Cannot find liblttng-ust-dev. Try installing liblttng-ust-dev …
Do we need to install dependencies each run?
Yes, on GitHub-hosted runners, the VM is ephemeral. Each workflow run starts from a clean image, so you must reinstall build dependencies in the workflow every time.
The apt cache is not persisted across runs; however, installs are usually fast, and GitHub’s mirrors are nearby.
If install time becomes a concern:
Use a containerized job with a prebuilt image that already has your deps.
Or, cache toolchains with actions/cache when they aren’t apt-managed (e.g., downloaded SDKs).
Or use a self-hosted runner where you control the environment (deps preinstalled), but that’s more ops overhead.
Next steps
Push a workflow change to main, then re-run the release workflow for tag v0.1.0:
UI: Actions → Release → Run workflow → tag: v0.1.0
Or CLI:
gh workflow run Release -f tag=v0.1.0
gh run watch <run-id> --exit-status
If additional diagnostics deps pop up (like libnuma-dev, libicu, etc.), we can extend that list similarly or switch to a container image with all the prerequisites baked in.

